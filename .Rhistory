Vans_Euclidean
Vans_Manhattan<-as.matrix(dist(Vans93[,-1],method="manhattan"))
colnames(Vans_Manhattan)<-Vans93[,1]
rownames(Vans_Manhattan)<-Vans93[,1]
Vans_Manhattan
D <- matrix(c(0,1,9,2,1.6,8,1,0,3,6,9,4,9,3,0,5,10,3,2,6,5,0,2,7.5,1.6,9,10,2,0,5.5,8,4,3,7.5,5.5,0),nrow=6,byrow = T)
print(D)
vertebrate <- read.csv("D:/Dickinson College Teaching/DATA 180/hw5/vertebrate.csv")
Ver_Euclidean<-as.matrix(dist(vertebrate[,-1]))
colnames(Ver_Euclidean)<-vertebrate[,1]
rownames(Ver_Euclidean)<-vertebrate[,1]
vertebrate_HC_1<-hclust(dist(Ver_Euclidean))
plot(vertebrate_HC_1,lwd=3,cex.lab=1.25,hang=-1,main="Clustered vertebrates, Euclidean Metric,\n Complete Linkage",xlab="Vertebrates",sub= "")
Ver_Manhattan<-as.matrix(dist(vertebrate[,-c(1,8)],method="manhattan"))
colnames(Ver_Manhattan)<-vertebrate[,1]
rownames(Ver_Manhattan)<-vertebrate[,1]
vertebrate_HC_2<-hclust(dist(Ver_Manhattan,method="manhattan"),method="single")
plot(vertebrate_HC_2,lwd=3,cex.lab=1.25,hang=-1,main="Clustered vertebrates, Manhattan Metric,\n Single Linkage",xlab="Vertebrates",sub= "")
library(tidyverse)
install.packages("tidyverse")
X <- matrix(c(-1,-2,4,2,0,0,-2,2,2,-1,-1,3,3,0,0,2,2,-3,1,1),nrow=5,byrow = T)
print(X)
install.packages("tidyverse")
library(tidyverse)
library(ggdendro)
dd <- as.matrix(dist(vertebrate[,-c(1,8)], method = "euclidean"))
colnames(dd)<-vertebrate[,1]
rownames(dd)<-vertebrate[,1]
hc <- hclust(dist(dd))
set_labels_params <- function(nbLabels,
direction = c("tb", "bt", "lr", "rl"),
fan       = FALSE) {
if (fan) {
angle       <-  360 / nbLabels * 1:nbLabels + 90
idx         <-  angle >= 90 & angle <= 270
angle[idx]  <-  angle[idx] + 180
hjust       <-  rep(0, nbLabels)
hjust[idx]  <-  1
} else {
angle       <-  rep(0, nbLabels)
hjust       <-  0
if (direction %in% c("tb", "bt")) { angle <- angle + 45 }
if (direction %in% c("tb", "rl")) { hjust <- 1 }
}
list(angle = angle, hjust = hjust, vjust = 0.5)
}
dendro_data_k <- function(hc, k) {
hcdata    <-  ggdendro::dendro_data(hc, type = "rectangle")
seg       <-  hcdata$segments
labclust  <-  cutree(hc, k)[hc$order]
segclust  <-  rep(0L, nrow(seg))
heights   <-  sort(hc$height, decreasing = TRUE)
height    <-  mean(c(heights[k], heights[k - 1L]), na.rm = TRUE)
for (i in 1:k) {
xi      <-  hcdata$labels$x[labclust == i]
idx1    <-  seg$x    >= min(xi) & seg$x    <= max(xi)
idx2    <-  seg$xend >= min(xi) & seg$xend <= max(xi)
idx3    <-  seg$yend < height
idx     <-  idx1 & idx2 & idx3
segclust[idx] <- i
}
idx                    <-  which(segclust == 0L)
segclust[idx]          <-  segclust[idx + 1L]
hcdata$segments$clust  <-  segclust
hcdata$segments$line   <-  as.integer(segclust < 1L)
hcdata$labels$clust    <-  labclust
hcdata
}
plot_ggdendro <- function(hcdata,
direction   = c("lr", "rl", "tb", "bt"),
fan         = FALSE,
scale.color = NULL,
branch.size = 1,
label.size  = 3,
nudge.label = 0.01,
expand.y    = 0.1) {
direction <- match.arg(direction) # if fan = FALSE
ybreaks   <- pretty(segment(hcdata)$y, n = 5)
ymax      <- max(segment(hcdata)$y)
## branches
p <- ggplot() +
geom_segment(data         =  segment(hcdata),
aes(x        =  x,
y        =  y,
xend     =  xend,
yend     =  yend,
linetype =  factor(line),
colour   =  factor(clust)),
lineend      =  "round",
show.legend  =  FALSE,
size         =  branch.size)
## orientation
if (fan) {
p <- p +
coord_polar(direction = -1) +
scale_x_continuous(breaks = NULL,
limits = c(0, nrow(label(hcdata)))) +
scale_y_reverse(breaks = ybreaks)
} else {
p <- p + scale_x_continuous(breaks = NULL)
if (direction %in% c("rl", "lr")) {
p <- p + coord_flip()
}
if (direction %in% c("bt", "lr")) {
p <- p + scale_y_reverse(breaks = ybreaks)
} else {
p <- p + scale_y_continuous(breaks = ybreaks)
nudge.label <- -(nudge.label)
}
}
# labels
labelParams <- set_labels_params(nrow(hcdata$labels), direction, fan)
hcdata$labels$angle <- labelParams$angle
p <- p +
geom_text(data        =  label(hcdata),
aes(x       =  x,
y       =  y,
label   =  label,
colour  =  factor(clust),
angle   =  angle),
vjust       =  labelParams$vjust,
hjust       =  labelParams$hjust,
nudge_y     =  ymax * nudge.label,
size        =  label.size,
show.legend =  FALSE)
# colors and limits
if (!is.null(scale.color)) {
p <- p + scale_color_manual(values = scale.color)
}
ylim <- -round(ymax * expand.y, 1)
p    <- p + expand_limits(y = ylim)
p
}
hcdata <- dendro_data_k(hc, 3)
plot_ggdendro(hcdata, direction = "lr", expand.y = 0.2) # try fan = TRUE
#install.packages("tidyverse")
X <- matrix(c(-1,-2,4,2,0,0,-2,2,2,-1,-1,3,3,0,0,2,2,-3,1,1),nrow=5,byrow = T)
print(X)
library(dplyr)
library(MASS)
data(Cars93)
Vans93 <- Cars93 %>% filter(Type=='Van') %>% dplyr::select(Model, Price, EngineSize, Horsepower, MPG.highway, Length)
Vans93
# y<-colnames(Vans_Euclidean)<-Vans93[,1]
# x<-rownames(Vans_Euclidean)<-Vans93[,1]
colnames(Vans_Euclidean)<-Vans93[,1]
vertebrate <- read.csv("D:/Dickinson College Teaching/DATA 180/hw5/vertebrate.csv")
vertebrate <- read.csv("D:/Dickinson College Teaching/DATA 180/hw5/vertebrate.csv")
nrows(vertebrate)
vertebrate <- read.csv("D:/Dickinson College Teaching/DATA 180/hw5/vertebrate.csv")
nrow(vertebrate)
apply(Data_M,2,mean)
Test<- matrix(sample(1:20,12, replace = T), nrow=3, byrow = T)
Test<- matrix(sample(1:20,12, replace = T), nrow=3, byrow = T)
Test
Test<- matrix(sample(1:20,12, replace = T), nrow=3, byrow = T)
Test # This matrix will be different every time you run the line 3.
apply(Test,1,mean)
apply(Test,2,mean)
apply(Test,2,sd)
apply(Test,2,sum)
apply(Test,1,sum)
apply(Test,2,sort, decreasing = T)
v1<-c(2,6,4,1)
v2<-c(21,34,55,11)
v3<-c(75,50,100,80)
Data_M<-data.frame(v1,v2,v3)
Data_M
apply(Data_M,2,mean)
apply(Data_M,2,sd)
rng<-apply(Data_M,2,max)-apply(Data_M,2,min)
rng
scale(Data_M, center = F, scale=rng)
library(planets)
head(planets)
library(planets)
head(planets)
planets_tr <-subset(planets, select = -c(Name,Radius (RJ),Temperature,Discovery method, Year))
# Text columns: Name,Radius, Temperature,Discovery method,year
ls(planets)
planets_tr <-subset(planets, select = -c(Name,Radius (RJ),Temperature,Year))
drop<-c("Discovery method", "Name", "Temperature", "Year")
planets_tr = planets[,!(names(planets) %in% drop)]
ls(planets_tr)
scale(planets_tr)
drop<-c("Discovery method", "Name", "Temperature", "Year", "Remarks")
planets_tr = planets[,!(names(planets) %in% drop)]
ls(planets_tr)
scale(planets_tr)
head(planets_tr)
drop<-c("Discovery method", "Name", "Temperature (K)", "Year", "Remarks", "Radius (RJ)")
planets_tr = planets[,!(names(planets) %in% drop)]
head(planets_tr)
scale(planets_tr)
Cluster_Ex<-read.csv("C:/Users/rodge/Downloads/Cluster_Ex.csv")
head(Cluster_Ex)
Kmeans_3<-kmeans(Cluster_Ex,centers=3)
Kmeans_3$centers
Kmeans_3<-kmeans(Cluster_Ex,centers=3)
head(Cluster_Ex)
Kmeans_3<-kmeans(Cluster_Ex,centers=3)
Kmeans_3<-kmeans(na.omit(Cluster_Ex),centers=3)
Kmeans_3<-kmeans(na.omit(Cluster_Ex),centers=3)
#Cluster_Ex<-read.csv("C:/Users/rodge/Downloads/Cluster_Ex.csv")
Cluster_Ex<-read_csv("C:/Recoverit 2023-11-03 at 12.02.47/D/Dickinson College Teaching/Data 300/Cluster_Ex.csv")
#Cluster_Ex<-read.csv("C:/Users/rodge/Downloads/Cluster_Ex.csv")
Cluster_Ex<-read.csv("C:/Recoverit 2023-11-03 at 12.02.47/D/Dickinson College Teaching/Data 300/Cluster_Ex.csv")
head(Cluster_Ex)
Kmeans_3<-kmeans(na.omit(Cluster_Ex),centers=3)
Kmeans_3<-kmeans(Cluster_Ex,centers=3)
Kmeans_3$centers
Cluster_Ex<-read.csv("C:/Users/rodge/Downloads/Cluster_Ex.csv")
#Cluster_Ex<-read.csv("C:/Recoverit 2023-11-03 at 12.02.47/D/Dickinson College Teaching/Data 300/Cluster_Ex.csv")
head(Cluster_Ex)
Kmeans_3<-kmeans(Cluster_Ex,centers=3)
Cluster_Ex<-read.csv("C:/Recoverit 2023-11-03 at 12.02.47/D/Dickinson College Teaching/Data 300/Cluster_Ex.csv")
head(Cluster_Ex)
Kmeans_3<-kmeans(Cluster_Ex,centers=3)
Kmeans_3$centers
Kmeans_3$withinss
Kmeans_3$cluster
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15+Kmeans_3$cluster,col=Kmeans_3$cluster)
points(X2~X1,data=Kmeans_3$centers,pch=10,cex=1.8,col="blue")
palette()
Kmeans_5_1<-kmeans(Cluster_Ex,centers=5)
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15+Kmeans_5_1$cluster,col=Kmeans_5_1$cluster)
Kmeans_5_2<-kmeans(Cluster_Ex,centers=5)
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15+Kmeans_5_2$cluster,col=Kmeans_5_2$cluster)
#using set seed for reproducibility.
Kmeans_5_3<-kmeans(Cluster_Ex,centers=Cluster_Ex[c(2,5,7,21,36),])
set.seed(42)
Kmeans_5_4<-kmeans(Cluster_Ex,centers=5)
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15+Kmeans_5_4$cluster,col=Kmeans_5_4$cluster)
set.seed(5)
Kmeans_5_4<-kmeans(Cluster_Ex,centers=5)
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15+Kmeans_5_4$cluster,col=Kmeans_5_4$cluster)
# Clsutering with 3 clustaers
Cluster3_S1<-kmeans(Cluster_Ex,centers=3)
Cluster3_S50<-kmeans(Cluster_Ex,centers=3,nstart=50)
Cluster3_S1
Cluster3_S1$withinss
Cluster3_S1$tot.withinss
Cluster3_S50$withinss
Cluster3_S50$tot.withinss
wgss<-rep(0,8)
for(i in 1:8){wgss[i]<-kmeans(Cluster_Ex,centers=i,nstart=50)$tot.withinss}
plot(c(1:8),wgss,type="b",pch=16,cex=1.3,ylim=c(0,100), xlab="Number of Groups",ylab="WGSS")
Kmeans_3$betweenss
Cluster_Ex<-read.csv("C:/Users/rodge/Downloads/Cluster_Ex.csv")
head(Cluster_Ex)
Kmeans_3<-kmeans(Cluster_Ex,centers=3)
Cluster_Ex<-read.csv("C:/Users/rodge/Downloads/Cluster_Ex.csv")
head(Cluster_Ex)
Kmeans_3<-kmeans(Cluster_Ex,centers=3)
#Centers.
Kmeans_3$centers
#Within Group Sum of Squares.
Kmeans_3$withinss
#Clusters.
Kmeans_3$cluster
# Plotting clusters.
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15+Kmeans_3$cluster,col=Kmeans_3$cluster)
#Adding centroids.
points(X2~X1,data=Kmeans_3$centers,pch=10,cex=1.8,col="blue")
palette()
Kmeans_5_1<-kmeans(Cluster_Ex,centers=5)
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15+Kmeans_5_1$cluster,col=Kmeans_5_1$cluster)
Kmeans_5_2<-kmeans(Cluster_Ex,centers=5)
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15+Kmeans_5_2$cluster,col=Kmeans_5_2$cluster)
#using set seed for reproducibility.
Kmeans_5_3<-kmeans(Cluster_Ex,centers=Cluster_Ex[c(2,5,7,21,36),])
set.seed(5)
Kmeans_5_4<-kmeans(Cluster_Ex,centers=5)
plot(X2~X1,data=Cluster_Ex,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15+Kmeans_5_4$cluster,col=Kmeans_5_4$cluster)
# Clustering with 3 clusters, nstart = 1. Randomize only once.
Cluster3_S1<-kmeans(Cluster_Ex,centers=3)
Cluster3_S50<-kmeans(Cluster_Ex,centers=3,nstart=50)
Cluster3_S1
Cluster3_S1$withinss
Cluster3_S1$tot.withinss
# Clustering with 3 clusters, nstart =50. Randomize 50 times.
Cluster3_S50
Cluster3_S50$withinss
Cluster3_S50$tot.withinss
# WGSS as a function of the number of clusters for values of K from 1 to 8.
wgss<-rep(0,8)
for(i in 1:8){wgss[i]<-kmeans(Cluster_Ex,centers=i,nstart=50)$tot.withinss}
plot(c(1:8),wgss,type="b",pch=16,cex=1.3,ylim=c(0,100), xlab="Number of Groups",ylab="WGSS")
#Between Group Sum of Squares. BGSS.
Kmeans_3$betweenss
# CH index.
chindex=c() # or rep(0,7)
for(k in 2:8){
chindex[i] <- (kmeans(df[2:3],k)$betweenss/(k-1))  / (kmeans(df[2:3],k)$tot.withinss/((nrow(df)-k)))
i=i+1
}
plot(2:8,chindex,pch=19,type='b')
i=1
for(k in 2:8){
chindex[i] <- (kmeans(df[2:3],k)$betweenss/(k-1))  / (kmeans(df[2:3],k)$tot.withinss/((nrow(df)-k)))
i=i+1
}
plot(2:8,chindex,pch=19,type='b')
Cluster3_S50$withinss
Cluster3_S50$tot.withinss
Cluster3_S50$betweenss
library(tidyverse)
install.packages("tidyverse")
install.packages("cli")
install.packages("cli")
install.packages("tidyverse")
library(tidyverse)
library(dplyr)
Mammals_Milk<-read.csv("D:/Dickinson College Teaching/DATA 180/hw6/Milk_Composition.csv",header=T,row.names=1)
Mammals_Milk %>% summary()
Mammals_Milk_Std<-round(scale(Mammals_Milk),2)
head(Mammals_Milk_Std)
Mammals_Milk_HC<-hclust(dist(Mammals_Milk_Std))
plot(Mammals_Milk_HC,lwd=3,sub="",hang=-1,xlab="Mammals",cex.lab=1.25,
main="Mammals Clustered by Std. Milk Composition \n Euclidean Metric, Complete Linkage",
frame.plot=T)
require(cowplot)
graph1 <- ggplot(Mammals_Milk, aes(x=factor(km_3), y=Water)) +
geom_boxplot()
graph2 <- ggplot(Mammals_Milk, aes(x=factor(km_3), y=Protein)) +
geom_boxplot()
graph3 <- ggplot(Mammals_Milk, aes(x=factor(km_3), y=Fat)) +
geom_boxplot()
graph4 <- ggplot(Mammals_Milk, aes(x=factor(km_3), y=Lactose)) +
geom_boxplot()
graph5 <- ggplot(Mammals_Milk, aes(x=factor(km_3), y=Ash)) +
geom_boxplot()
plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
require(cowplot)
graph1 <- ggplot(Mammals_Milk, aes(x=factor(km_3), y=Water)) +
geom_boxplot()
graph2 <- ggplot(Mammals_Milk, aes(x=factor(km_3), y=Protein)) +
geom_boxplot()
graph3 <- ggplot(Mammals_Milk, aes(x=factor(km_3), y=Fat)) +
geom_boxplot()
graph4 <- ggplot(Mammals_Milk, aes(x=factor(km_3), y=Lactose)) +
geom_boxplot()
graph5 <- ggplot(Mammals_Milk, aes(x=factor(km_3), y=Ash)) +
geom_boxplot()
plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
set.seed(125)
MMilk_km_3<-kmeans(Mammals_Milk_Std,centers=3,nstart=100)
MMilk_km_4<-kmeans(Mammals_Milk_Std,centers=4,nstart=100)
Mammals_Milk<-data.frame(Mammals_Milk,km_3=MMilk_km_3$cluster,km_4=MMilk_km_4$cluster)
Mammals_Milk %>% arrange(km_3)
Mammals_Milk %>% arrange(km_4)
MMilk_Agg_K3<-Mammals_Milk %>%
group_by(km_3) %>%
summarize(Count=n(),Mean_Water=mean(Water),Mean_Protein=mean(Protein), Mean_Fat=mean(Fat),Mean_Lactose=mean(Lactose),Mean_Ash=mean(Ash)) %>%
round(2)
MMilk_Agg_K3
MMilk_Agg_K4<-Mammals_Milk %>%
group_by(km_4) %>%
summarize(Count=n(),Mean_Water=mean(Water),Mean_Protein=mean(Protein),
Mean_Fat=mean(Fat),Mean_Lactose=mean(Lactose),Mean_Ash=mean(Ash)) %>%
round(2)
MMilk_Agg_K4
require(cowplot)
graph1 <- ggplot(Mammals_Milk, aes(x=factor(km_3), y=Water)) +
geom_boxplot()
graph2 <- ggplot(Mammals_Milk, aes(x=factor(km_3), y=Protein)) +
geom_boxplot()
graph3 <- ggplot(Mammals_Milk, aes(x=factor(km_3), y=Fat)) +
geom_boxplot()
graph4 <- ggplot(Mammals_Milk, aes(x=factor(km_3), y=Lactose)) +
geom_boxplot()
graph5 <- ggplot(Mammals_Milk, aes(x=factor(km_3), y=Ash)) +
geom_boxplot()
plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
#theme_set(theme_classic()) # you can change default ggplot2 themes--see more: https://ggplot2.tidyverse.org/reference/ggtheme.html
wgss<-rep(0,8)
for(i in 1:8){
wgss[i]<-kmeans(Mammals_Milk_Std,centers=i,nstart=50)$tot.withinss
}
ggplot(as.data.frame(wgss), aes(x=1:8,y=wgss)) + geom_point(size=2) + geom_line(linetype = "dashed")
#plot(c(1:8),wgss,type="b",pch=16,cex=1.3,ylim=c(0,150),xlab="Number of Groups", ylab="WGSS")
Trees<-data("trees")
Trees
head(Trees)
Trees<-data(trees)
head(Trees)
trees
Trees
Trees
Trees<-read.csv("D:/Dickinson College Teaching/DATA 180/data/Trees.csv")
Trees
Trees_Match<-dist(Trees, method="manhattan")/4
Trees_Match
Trees_Match_M<-as.matrix(dist(Trees, method="manhattan")/4)
Trees_Match_M
Trees_Jaccard<-dist(Trees, method="binary")
Trees_Jaccard
Trees_Jaccard_M<-as.matrix(dist(Trees, method="binary"))
Trees_Jaccard_M
x = [1,2,3,4]
x<- list(1,2,3)
x
x1=list(1,2,3)
x1
x1
append(x, 4)
x
append(x,4)
x
my_function <- function() { # create a function with the name my_function
print("Hello World!")
}
my_function()
my_function()
my_function()
install.packages("ggplot2")
read.csv("C:/Users/rodge/Downloads/2019 Data.csv")
data<-read.csv("C:/Users/rodge/Downloads/2019 Data.csv")
data
x<- list(1,2,3)
my_function <- function() { # create a function with the name my_function
print("Hello World!")
}
my_function()
my_function()
my_function()
read.csv()
install.packages("ggplot2")
library(ggplot2)
x
x
class(x)
class(5)
my_name<-"Kennedy"
class(my_name)
five<-as.integer(5.5)
class(five)
#### Example
a <- 5.5
b <- 2
class(a) # "numeric"
class(b) # "numeric"
#### Example
a <- 5L
class(a) # "integer"
#### Example
a <- 5
class(a) # "integer"
#### Example
a <- 5L
#### Example
a <- 5R
#### Example
a <- 5L
class(a) # "integer"
#### Example
a <- 3 + 4i
class(a) # "complex"
a <- TRUE
class(a) # "logical"
b <- 5 > 2
b <- 5 > 2
class(b) # "logical", because 5 > 2 is TRUE
b <- 5=2
b <- 5==2
class(b) # "logical", because 5 > 2 is TRUE
#### Example
a <- "Hello, R!"
class(a) # "character"
gender <- factor(c("male", "female", "female", "male"))
class(gender) # "factor"
a <- c(1, NA, 3)
sum(a) # NA
#### Example
a <- 1 / 0
a
#### Example
a <- "100"
class(a)
b <- as.numeric(a)
class(b) # "numeric"
# Numeric vector
num_vector <- c(1, 2, 5, 7) #<-
num_vector
# Numeric vector
num_vector = c(1, 2, 5, 7) #<-
num_vector
# Numeric vector
num_vector <-c(1, 2, 5, 7) #<-
# Create a matrix with 3 rows and 2 columns
my_matrix <- matrix(1:6, nrow = 3, ncol = 2)
my_matrix
#
getwd()
# set working directory and read file from directory
setwd("C:/Users/rodge/OneDrive/Desktop/QMBE 3730 Kennedy Odongo/QMBE-3730-Kennedy-Odongo")
# set working directory and read file from directory
setwd("C:\Users/rodge/OneDrive/Desktop/QMBE 3730 Kennedy Odongo/QMBE-3730-Kennedy-Odongo")
# set working directory and read file from directory
setwd("C:/Users/rodge/OneDrive/Desktop/QMBE 3730 Kennedy Odongo/QMBE-3730-Kennedy-Odongo")
read.csv("C:/Users/rodge/OneDrive/Desktop/QMBE 3730 Kennedy Odongo/QMBE-3730-Kennedy-Odongo/mobile_phone_prices.csv")
# Create a simple data frame
df <- data.frame(
Name = c("Alice", "Bob", "Charlie"),
Age = c(25, 30, 35),
Salary = c(50000, 60000, 70000),
stringsAsFactors = FALSE  # Ensures character data is not converted to factors (useful in R versions before 4.0.0)
)
print(df)
class(df)
mobile_phone_prices<-read.csv("mobile_phone_prices.csv")
class(mobile_phone_prices)
